// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Ddarli/utils/models"
	mock "github.com/stretchr/testify/mock"

	pkgmodels "github.com/Ddarli/app/shop/pkg/models"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields: ctx
func (_m *Service) GetAll(ctx context.Context) ([]*models.Product, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Product, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type Service_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Service_Expecter) GetAll(ctx interface{}) *Service_GetAll_Call {
	return &Service_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *Service_GetAll_Call) Run(run func(ctx context.Context)) *Service_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Service_GetAll_Call) Return(_a0 []*models.Product, _a1 error) *Service_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetAll_Call) RunAndReturn(run func(context.Context) ([]*models.Product, error)) *Service_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessOrder provides a mock function with given fields: ctx, request
func (_m *Service) ProcessOrder(ctx context.Context, request pkgmodels.OrderRequest) (*pkgmodels.OrderResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for ProcessOrder")
	}

	var r0 *pkgmodels.OrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pkgmodels.OrderRequest) (*pkgmodels.OrderResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pkgmodels.OrderRequest) *pkgmodels.OrderResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkgmodels.OrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pkgmodels.OrderRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_ProcessOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessOrder'
type Service_ProcessOrder_Call struct {
	*mock.Call
}

// ProcessOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - request pkgmodels.OrderRequest
func (_e *Service_Expecter) ProcessOrder(ctx interface{}, request interface{}) *Service_ProcessOrder_Call {
	return &Service_ProcessOrder_Call{Call: _e.mock.On("ProcessOrder", ctx, request)}
}

func (_c *Service_ProcessOrder_Call) Run(run func(ctx context.Context, request pkgmodels.OrderRequest)) *Service_ProcessOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pkgmodels.OrderRequest))
	})
	return _c
}

func (_c *Service_ProcessOrder_Call) Return(_a0 *pkgmodels.OrderResponse, _a1 error) *Service_ProcessOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_ProcessOrder_Call) RunAndReturn(run func(context.Context, pkgmodels.OrderRequest) (*pkgmodels.OrderResponse, error)) *Service_ProcessOrder_Call {
	_c.Call.Return(run)
	return _c
}

// StartConsuming provides a mock function with given fields: ctx
func (_m *Service) StartConsuming(ctx context.Context) {
	_m.Called(ctx)
}

// Service_StartConsuming_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartConsuming'
type Service_StartConsuming_Call struct {
	*mock.Call
}

// StartConsuming is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Service_Expecter) StartConsuming(ctx interface{}) *Service_StartConsuming_Call {
	return &Service_StartConsuming_Call{Call: _e.mock.On("StartConsuming", ctx)}
}

func (_c *Service_StartConsuming_Call) Run(run func(ctx context.Context)) *Service_StartConsuming_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Service_StartConsuming_Call) Return() *Service_StartConsuming_Call {
	_c.Call.Return()
	return _c
}

func (_c *Service_StartConsuming_Call) RunAndReturn(run func(context.Context)) *Service_StartConsuming_Call {
	_c.Run(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
